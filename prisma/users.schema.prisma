// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./usersClient"
}

datasource db {
  provider = "mysql"
  url      = env("USERS_DB_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("user_id")
  id        String   @unique @map("id")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Characters Characters[]?

  @@map("users")
}

model Characters{
  characterId         String  @id @default(uuid()) @map("character_id")
  UserId              Int     @map("user_id")
  characterName       String  @map("character_name")
  characterStatHealth Int     @map("character_stat_health")
  characterStatPower  Int     @map("character_stat_power")
  characterMoney      Int     @map("character_money")  

  User Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  Inventory Inventories?
  Equip Equips?

  @@map("characters")
}

model Inventories{
  inventoryId  Int    @id @default(autoincrement()) @map("inventory_id")
  CharacterId  String @map("character_id")
  itemCode     Int    @map("item_code")
  //itemNum   Int   @map("item_num")

  Character Characters @relation(fields: [CharacterId], references: [characterId], onDelete:Cascade)

  @@map("inventories")
}

model Equips{
  equipId Int @id @default(autoincrement()) @map("equip_id")
  CharacterId  String @map("character_id")
  itemCode     Int    @map("item_code")

  Character Characters @relation(fields: [CharacterId], references: [characterId], onDelete:Cascade)

  @@map("equips")
}